/*
    Recite18th is a simple, easy to use and straightforward Java Database 
    Web Application Framework. See http://code.google.com/p/recite18th
    Copyright (C) 2011  Eko Suprapto Wibowo (swdev.bali@gmail.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
 */

package recite18th.util;
import java.io.*;
import recite18th.library.Db;
import java.sql.*;
import java.util.*;
import java.util.Date;
import java.util.logging.*;
//import application.config.SqlCustomization;
/**
 * March  3, 2011

 * It will allow no user side involvement in introducing database model and controller
 * to the application. To introduce view, is the responsibility of GenerateForm.java
 * 
 * I want to add specific model update on
 */
public class Synch
{
    public static void main(String arg[])
    {
        //TODO : from anywhere, change to the correct directory
        System.out.println("Synchronizing models with database...");
        Db.init();
        String controllerList = "";
        try{
            DatabaseMetaData meta = Db.getCon().getMetaData();
            String[] types = {"TABLE"};
            ResultSet rs = meta.getTables(null,null,"%",types);            
            while (rs.next()){
                //proper class name generation
                String className = "";
                String controllerName = "";
                String tableName = rs.getString("TABLE_NAME");
                StringTokenizer st = new StringTokenizer(tableName, "_");
                while(st.hasMoreTokens())
                {
                    className = className+StringUtil.firstCap(st.nextToken());
                }
                controllerName = className;
                className+="Model";
                
                if(controllerList.equals("")) 
                {
                    controllerList = "<li><a href=\"<%=Config.base_url%>index/" + controllerName + "\">" + controllerName + "</a></li>\n";
                }
                else 
                {
                    controllerList = controllerList + "\n" + "<li><a href=\"<%=Config.base_url%>index/" + controllerName + "\">" + controllerName + "</a></li>\n";; //here, again | string delimiter
                }
                

                //create file
                //instead of modifying, we create new in separate file, that will be the superclass
                System.out.println("Creating scaffholding class _" + className+".java from table " + application.config.Database.DB + "." + tableName);
                File f = new File("application/models/_"+className+".java");
                Writer out = new FileWriter(f);
                
                //get sqlDataViewPerPage definition
                String sql = null;

                //if(SqlCustomization.getTable(tableName)!=null) // there is customization for this table
                //{
                //  if(SqlCustomization.getTable(tableName).get("sqlViewDataPerPage")!=null)
                //  {
                //      sql = SqlCustomization.getTable(tableName).get("sqlViewDataPerPage") + "";
                //  }
                //}else{ // standard view for this table : hide PK, because mostly is auto increment
                sql = "select * from " + tableName;
                    //}

                PreparedStatement pstmt = Db.getCon().prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet resultSet = pstmt.executeQuery();
                ResultSetMetaData metaColumn = resultSet.getMetaData();
                int nColoumn = metaColumn.getColumnCount();
                resultSet.beforeFirst();
                resultSet.next();
                
                //create scaffholding class
                out.write("/** \n");
                out.write(" * Autogenerated by Recite18th from table " + application.config.Database.DB+"."+tableName+"\n");
                out.write(" * Don't change this file. Instead, change the derived class "+className+"\n");
                out.write(" * \n");
                out.write(" */\n");
                out.write("\n");
                out.write("package application.models;\n");
                out.write("import recite18th.model.Model;\n");
                out.write("public class _" + className + " extends Model\n");
                out.write("{\n");
                //cek primary key
                ResultSet primaryKeyRs = meta.getPrimaryKeys(null, application.config.Database.DB,tableName);
                String primaryKey = "";
                if(primaryKeyRs!=null)
                {

                    // ResultSetMetaData metaPK = primaryKey.getMetaData();
                    // for(int i = 1; i < metaPK.getColumnCount();i++)
                    // {
                    //     System.out.println(metaPK.getColumnCount() + ": metaPK = " + metaPK.getColumnName(i));
                    // }

                    while(primaryKeyRs.next())
                    {
                        if(!primaryKey.equals(""))
                        {
                            primaryKey = primaryKey + "|" + primaryKeyRs.getObject(4);// we handle multi column primary Key this way
                        }else
                        {
                            primaryKey = primaryKeyRs.getString(4);//usually, single column primary Key
                        }
                    }   
                    System.out.println("Primary key for table " + tableName + " is " + primaryKey);
                }else{
                    System.out.println("No Primary Key Defined!");
                }
                
                // for (int i = 1; i <= nColoumn; i++) {
                //     //by .. lupa jhe namanya.. :((
                //     // if(metaColumn.isAutoIncrement(i))
                //     // {
                //     //     primaryKey = metaColumn.getColumnName(i);
                //     //     i=nColoumn+1;
                //     // }
                // }

                //fields
                for (int i = 1; i <= nColoumn; i++) {
                    String columnName = metaColumn.getColumnName(i);
                    String dataType = metaColumn.getColumnClassName(i);       
                    boolean isPrimaryKey = metaColumn.isAutoIncrement(i);

                    //variable
                    out.write("    public String " + columnName + ";\n");
                }
                //constructor
                out.write("    public _"+className+"()\n");
                out.write("    {\n");
                out.write("        tableName=\""+ tableName+"\";\n");
                out.write("        pkFieldName=\""+primaryKey+"\";\n");
                out.write("        fqn = "+className+".class.getName();\n");
                out.write("        plainClassName = \""+className+"\";\n");
                out.write("    }\n");

           
                String get = "";
                for (int i = 1; i <= nColoumn; i++) {
                    String columnName = metaColumn.getColumnName(i);
                    String dataType = metaColumn.getColumnClassName(i);       

                    //setter
                    String setter = "set" + StringUtil.firstCap(columnName);
                    out.write("    public void " + setter + "(String " + columnName + ")\n");
                    out.write("    {\n");
                    out.write("        this." + columnName + "="+columnName+";\n");
                    out.write("    }\n");

                    //getter
                    String getter = "get" + StringUtil.firstCap(columnName);
                    out.write("    public String " + getter + "()\n");
                    out.write("    {");
                    out.write("        return this." + columnName+";\n");
                    out.write("    }\n");
                    
                    //for body of get()
                    get = get + "            " + setter + "(result." + getter + "());\n";
                    
                }
      

                //helper method
                out.write("    public void get()\n");
                out.write("    {\n");
                out.write("        _" + className + " result = (_" + className +") super.getModel();\n");
                out.write("        if(result!=null)\n");
                out.write("        {\n");
                out.write(get);
                out.write("        }\n");
                out.write("    }\n");

                //end of class _Model
                out.write("}\n");
                out.flush();
                out.close();     


                //create user customize class, if hasn't been created yet
                File fUser = new File("application/models/"+className+".java");
                if(!fUser.exists())
                {
                    System.out.println("Create user customized model class");
                    Writer outUser = new FileWriter(fUser);
                    outUser.write("/** \n");                    
                    outUser.write(" * Autogenerated by Recite18th at " + (new Date()) + "\n");
                    outUser.write(" * \n");
                    outUser.write(" */\n");
                    outUser.write("\n");
                    outUser.write("package application.models;\n");
                    outUser.write("import recite18th.model.Model;\n");
                    outUser.write("import application.models._"+className+";\n");
                    outUser.write("public class " + className + " extends _"+className+"\n");
                    outUser.write("{\n");
                    //constructor
                    outUser.write("    public "+className+"()\n");
                    outUser.write("    {\n");
                    outUser.write("        super();\n");
                    outUser.write("    }\n");                    
                    outUser.write("}\n");
                    outUser.flush();
                    outUser.close();     
                }

                //create starter of Controller
                File fController = new File("application/controllers/_"+controllerName+".java");
                boolean replaceAll = true; //default behaviour is false.. but it's in process, so always create
                
                System.out.println("Create base controller _" + controllerName);
                Writer outController = new FileWriter(fController);
                outController.write("/** \n");
                //outController.write(" * Autogenerated by Recite18th at " + (new Date()) + "\n");
                outController.write(" * \n");
                outController.write(" */\n");
                outController.write("\n");
                outController.write("package application.controllers;\n");
                outController.write("import recite18th.controller.Controller;\n");
                outController.write("import recite18th.model.ChooserModel;\n");
                outController.write("import application.models."+className+";\n");
                outController.write("\n");
                outController.write("public class _" + controllerName + " extends Controller\n");
                outController.write("{\n");
                outController.write("    private final static String view_page_content = \"" + tableName + "\\\\view_"+tableName+".jsp\";\n");
                outController.write("    private final static String form_page_content = \"" + tableName + "\\\\form_"+tableName+".jsp\";\n");
                //constructor
                outController.write("    public _"+controllerName+"()\n");
                outController.write("    {\n");
                outController.write("        controllerName = \""+controllerName+"\";\n");
                outController.write("        isNeedAuthorization = true;\n");//I default the authorization of all controller to be true..
                //outController.write("        viewPage = );
                outController.write("        viewPage = \"index.jsp\";\n");
                outController.write("        formPage = \"index.jsp\";\n");
                outController.write("        modelForm = new " + className + "();\n");
                outController.write("    }\n");                    
                
                //index method : open view page
                outController.write("    public void index()\n");
                outController.write("    {\n");
                outController.write("        request.setAttribute(\"body_content\",view_page_content);\n");
                outController.write("        request.setAttribute(\"active_controller\",controllerName);\n");
                outController.write("        isNeedAuthorization = true;\n");//I default the authorization of all controller to be true..
                outController.write("        viewPage = \"index.jsp\";\n");
                outController.write("        super.index();\n");
                outController.write("    }\n");                    
                

                //input method : open form page
                outController.write("    public void input(String pkFieldValue)\n");
                outController.write("    {\n");
                outController.write("        request.setAttribute(\"body_content\",form_page_content);\n");
                outController.write("        isNeedAuthorization = true;\n");//I default the authorization of all controller to be true..
                outController.write("        super.input(pkFieldValue);\n");
                outController.write("    }\n");                    

                
                //choose view : if this table is going to be open as foreign key of another table
                outController.write("    public void chooseView()\n");
                outController.write("    {\n"); 
                outController.write("        isNeedAuthorization = true;\n");
                outController.write("        ChooserModel chooserModel = new ChooserModel(\""+tableName+"\",\"" + primaryKey  + "\");\n");
                outController.write("        row = chooserModel.getDataPerPage(\"select "+ primaryKey  +" as id," + tableName + " as label from "+ tableName +" order by label\");\n");
                outController.write("        request.setAttribute(\"row\", row);\n");                
                outController.write("        request.setAttribute(\"choose_pkFieldName\", \""+ primaryKey +"\");\n");//set its pk field name
                outController.write("        super.index(\"index_choose.jsp\");\n");
                outController.write("    }\n");
                outController.write("}\n");
                outController.flush();
                outController.close();     

                //create user modified controller
                File fUserController = new File("application/controllers/"+controllerName+".java");
                if(!fUserController.exists())
                {
                    System.out.println("Create User modified controller " + controllerName);
                    Writer outUserController = new FileWriter(fUserController);
                    outUserController.write("/** \n");
                    //outController.write(" * Autogenerated by Recite18th at " + (new Date()) + "\n");
                    outUserController.write(" * \n");
                    outUserController.write(" */\n");
                    outUserController.write("\n");
                    outUserController.write("package application.controllers;\n");
                    outUserController.write("import recite18th.controller.Controller;\n");
                    outUserController.write("import application.models."+className+";\n");
                    outUserController.write("\n");
                    outUserController.write("public class " + controllerName + " extends _"+controllerName + "\n");
                    outUserController.write("{\n");
                    outUserController.write("}\n");
                    outUserController.flush();
                    outUserController.close();    
                } 
            }
            
            File fController = new File("../../web/WEB-INF/views/controllers");
            Writer outController = new FileWriter(fController);
            outController.write(controllerList);
            outController.flush();
            outController.close();
            
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
}