/*
    Recite18th is a simple, easy to use and straightforward Java Database 
    Web Application Framework. See http://code.google.com/p/recite18th
    Copyright (C) 2011  Eko Suprapto Wibowo (swdev.bali@gmail.com)

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see http://www.gnu.org/licenses/.
 */

package recite18th.util;
import java.io.*;
import recite18th.library.Db;
import java.sql.*;
import java.util.*;
import java.util.Date;
import java.util.logging.*;
/**
 * March  3, 2011

 * It will allow no user side involvement in introducing database model
 * to the application
 */
public class Synch
{
    public static void main(String arg[])
    {
        //TODO : hapus semua class di bawah models, (gampang) atau
        //TODO : tidak menghapus, tapi memodifikasi file yang sudah ada (rumit)
        System.out.println("Synchronizing models with database...");
        Db.init();
        try{
            DatabaseMetaData meta = Db.getCon().getMetaData();
            String[] types = {"TABLE"};
            ResultSet rs = meta.getTables(null,null,"%",types);
           
            while (rs.next()){
                //proper class name generation
                String className = "";
                String tableName = rs.getString("TABLE_NAME");
                StringTokenizer st = new StringTokenizer(tableName, "_");
                while(st.hasMoreTokens())
                {
                    className = className+StringUtil.firstCap(st.nextToken());
                }
                className+="Model";
                
                
                

                //create file
                System.out.println("..Creating class " + className+".java");
                File f = new File("application/models/"+className+".java");
                Writer out = new FileWriter(f);
                System.out.println(tableName);
                String sql = "select * from " + tableName;
                PreparedStatement pstmt = Db.getCon().prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);
                ResultSet resultSet = pstmt.executeQuery();
                ResultSetMetaData metaColumn = resultSet.getMetaData();
                int nColoumn = metaColumn.getColumnCount();
                resultSet.beforeFirst();
                resultSet.next();
                
                out.write("/** \n");
                out.write(" * Autogenerated by Recite18th at " + (new Date()) + "\n");
                out.write(" * \n");
                out.write(" */\n");
                out.write("\n");
                out.write("package application.models;\n");
                out.write("import recite18th.model.Model;\n");
                out.write("public class " + className + " extends Model\n");
                out.write("{\n");
                //cek primary key
                String primaryKey = null;
                for (int i = 1; i <= nColoumn; i++) {
                 
                    //by .. lupa jhe namanya.. :((
                    if(metaColumn.isAutoIncrement(i))
                    {
                        primaryKey = metaColumn.getColumnName(i);
                        i=nColoumn+1;
                    }
                }
                //fields
                for (int i = 1; i <= nColoumn; i++) {
                    String columnName = metaColumn.getColumnName(i);
                    String dataType = metaColumn.getColumnClassName(i);       
                    boolean isPrimaryKey = metaColumn.isAutoIncrement(i);

                    //variable
                    out.write("    public String " + columnName + ";\n");
                }
                //constructor
                out.write("    public "+className+"()\n");
                out.write("    {\n");
                out.write("        tableName=\""+ tableName+"\";\n");
                out.write("        pkFieldName=\""+primaryKey+"\";\n");
                out.write("        fqn = "+className+".class.getName();\n");
                out.write("    }\n");



                for (int i = 1; i <= nColoumn; i++) {
                    String columnName = metaColumn.getColumnName(i);
                    String dataType = metaColumn.getColumnClassName(i);       

                    //setter
                    out.write("    public void set" + StringUtil.firstCap(columnName) + "(String " + columnName + ")\n");
                    out.write("    {\n");
                    out.write("        this." + columnName + "="+columnName+";\n");
                    out.write("    }\n");

                    //getter
                    out.write("    public String get" + StringUtil.firstCap(columnName) + "()\n");
                    out.write("    {");
                    out.write("        return this." + columnName+";\n");
                    out.write("    }\n");
                }
                out.write("}\n");
                out.flush();
                out.close();            
            }
        }catch(Exception e)
        {
            e.printStackTrace();
        }
    }
    
}