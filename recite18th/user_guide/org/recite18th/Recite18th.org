* Pengembangan Aplikasi Web Java dengan Framework Recite18th
** Jenis Aplikasi Web Java
*** Model 1
    User langsung merequest JSP (misal index.jsp, daftar_pegawai.jsp, dsb)
    USER => JSP
*** Model 2 (MVC)
    User tidak bisa mengakses JSP secara langsung, namun melalui servlet Utama. 
    Servlet utama ini akan mengatur servlet2 yang berfungsi sebagai Controller,
    dan controller2 itu akan memannggil Model2 yg sesuai.
    USER => CONTROLLER UTAMA =>> CONTROLLER APLIKASI => MODEl => BASIS DATA
    
    Sudah banyak ada framework/kerangka kerja aplikasi Web yang mengimplementasikan
    model 2, semisal : Struts, Spring dan JSF. Namun, semuanya masih kompleks.

    Dan, sebenarnya bisa mengembangkan aplikasi Web model 2 sendiri, namun akan menyita waktu.
    
    Maka, dipergunakan framework buatan sendiri (Recite18th), yang bisa dipergunakan dengan 
*** Framework Aplikasi Web Java Model 2
    Untuk mengembangkan aplikasi Web Java Model 2, jika dimulai dari 0, akan banyak kode yang dibutuhkan.
    Untuk itu dapat dipergunakan berbagai framework Web Java Model2 (MVC) yang sudah tersedia di dunia Java.
    Dimulai dari Struts, maka saat ini tersedia begitu banyak framework Web java, diantaranya:
    * Spring MVC
      Ini merupakan framework yang sangat lengkap, dan mungkin yang sudah menjadi standar dunia industri,
      dikarenakan kelengkapannya itu.
    * Java Server Faces (JSF)
      Boleh dibilang framework ini merupakan standar framework yang dihasilkan oleh konsorsium Java. 
      Sangat kompleks :)
    * Apache Tapestry
      Dikembangkan oleh satu orang, Howard Lewisship, framework ini mudah digunakan.

    Dan masih banyak framework Java yang ada di dunia OpenSource.
*** Memperkenalkan : Recite18th - A Lucid Java Web Framework
    Framework ini dikembangkan karena terinspirasi oleh framework PHP CodeIgniter, CI, di www.codeigniter.net.
    Saat mengerjakan aplikasi dengan CI, terbayang suatu ide : kenapa framework Web Java tidak bisa semudah ini?
    Dengan motivasi itu, maka framework Recite18th ini dikembangkan dengan prinsip2 :
    * Mudah dipergunakan
    * Minim konfigurasi
    * Ringan dan cepat
** Aplikasi Web Java dengan Framework 
*** Quick Start
**** Buat Project Java Web
     Silahkan buat aplikasi web dengan IDE apa saja : Netbeans, IntelliJ IDEA atau Eclipse.
     Tambahkan recite18th.jar ke dalam library yang dipakai. Atau Anda bisa juga mengekstrak
     recite18th.jar, dan menggunakannya sebagai bagian dari source. Dengan cara ini, Anda akan
     dapat melihat/memodifikasi kode sumber Recite18th secara langsung.
**** Ubah konfigurasi web.xml
     Ubah isi dari web.xml, dan tambahkan definisi servlet Index milik dari Recite18th:
     <servlet>
         <servlet-name>index</servlet-name>
         <servlet-class>recite18th.Index</servlet-class>
     </servlet>
     <servlet-mapping>
         <servlet-name>index</servlet-name>
         <url-pattern>/index/*</url-pattern>
     </servlet-mapping>

     Dengan cara ini, maka controller-controller aplikasi Anda akan dapat diakses menggunakan pola:
     index/<nama class controller>/<nama method>/<param1>/<param2>/..
**** Tambahkan folder application
     Tambahkan folder application/config di bawah src/java, sebagai berikut:
     + application
       + config
         Config.java
         Database.java
       + controllers
         < akan berisi semua controller aplikasi >

***** Kelas Config.java
      Itu adalah kelas konfigurasi yang dibutuhkan recite18th agar dapat berjalan. 
      Kelas Config.java :

      package application.config;
      
      public class Config {
        public static final String firstController = "main";
        public static final String page404 =  "page404.jsp";
        public static final String base_url = "http://localhost:8084/Model2/";
      }

      firstController merupakan nama dari kelas controller pertama yang akan dijalankan oleh aplikasi.
      Pada konfigurasi aplikasi tersebut, didefisikan bahwa kelas controller pertama yang akan 
      dijalankan adalah kelas Main.java
***** Kelas Database.java
      Kelas ini merupakan definisi dari koneksi basis data aplikasi. 

      public class Database {
        public static final String HOST = "localhost";
        public static final String PORT = "3306";
        public static final String DB = "ruklis3";
        public static final String USER_NAME = "root";
        public static final String PASSWORD = "adminadmin";
        public static final String DB_TYPE="mysql" ;//mssql
      }

      
***** Tambahkan kelas Controller pertama
      Karena pada kelas Config, didefinisikan firstController = "main", maka Anda harus menciptakan kelas
      controller dengan nama Main, pada folder application.controller, sebagai berikut :
      + application
        + controllers
          Main.java

      Main.java akan dijalankan pertama kali :
      import recite18th.controller.Controller;

      public class Main extends Controller{
        public Main(){
          this.viewPage="index.jsp";
        }
      }
      
      Kelas ini mendefiniskan viewPage = "index.jsp", maka ini merupakan file JSP yang dihubungkan
      dengan controller ini.

***** Tambahkan file index.jsp
      Untuk penambahkan file JSP, agar diproteksi dari pengaksesan secara langsung, maka peletakkannya
      harus di dalam folder WEB-INF/views:
      + WEB-INF
        + views
          index.jsp

      Berikut isi file dari index.jsp :
      <%@page contentType="text/html" pageEncoding="UTF-8"%>
      <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
      "http://www.w3.org/TR/html4/loose.dtd">
      
      <html>
      <head>
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
      <title>Aplikasi Pertama Dengan Recite18th</title>
      </head>
      <body>
      <h2>Selamat datang</h2>
      </body>
      </html>
      
      Selesai. :) 
      Aplikasi sudah siap dikembangkan dengan menggunakan cara kerja aplikasi
      Web Java Model 
*** Tutorial
    Pada tutorial ini, Anda akan mengembangkan aplikasi mulai dari yang sederhana, 
    sampai yang paling kompleks.
**** Buku Tamu
***** Setup Project
**** Kalkulator
**** Buku Alamat
**** Login/Logout
      
